#!/usr/bin/env python3
"""
Plot lap statistics generated by the line_statistics node.

Features:
  * Reads one or multiple CSV files (e.g. Data_Plotter/laps_stats/lap_*.csv).
  * Lets you choose which columns to plot on each axis (prompt or CLI args).
  * Supports scatter or line plots using Plotly and saves to HTML if desired.
  
To use: python3 dataPlotter.py --pattern "laps_stats/lap_*.csv" --kind scatter --color lap_index
"""

import argparse
import glob
import os
import sys
from typing import List, Optional, Sequence

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


DEFAULT_PATTERN = os.path.join("Data_Plotter", "laps_stats", "lap_*.csv")


def discover_files(pattern: str) -> List[str]:
  """Return a sorted list of files matching the glob pattern."""
  files = sorted(glob.glob(pattern))
  if not files:
    raise FileNotFoundError(
        f"No CSV files found for pattern '{pattern}'. "
        "Adjust --pattern or pass explicit --files.")
  return files


def load_data(files: Sequence[str]) -> pd.DataFrame:
  """Load CSV files, annotating each row with lap metadata."""
  frames = []
  for path in files:
    df = pd.read_csv(path)
    df["lap_file"] = os.path.basename(path)
    # Try to extract lap index from the filename (format: lap_###_...csv)
    lap_index = None
    parts = df["lap_file"].iloc[0].split("_")
    if parts and parts[0].lower().startswith("lap"):
      try:
        lap_index = int(parts[1])
      except (IndexError, ValueError):
        pass
    df["lap_index"] = lap_index
    frames.append(df)
  combined = pd.concat(frames, ignore_index=True)
  # Ensure columns from newer CSV schema exist even if older files lack them.
  expected_cols = [
      "stamp_relative",
      "stamp_absolute",
      "error",
      "linear_x",
      "angular_z",
      "left_speed",
      "right_speed",
      "sample_index",
      "mean_error",
      "rmse",
      "stddev",
      "mean_abs_error",
      "max_abs_error",
      "kp",
      "ki",
      "kd",
      "base_speed",
      "red_speed",
      "green_speed",
      "blue_speed",
  ]
  for col in expected_cols:
    if col not in combined.columns:
      combined[col] = pd.NA
  return combined


def choose_column(prompt: str, columns: Sequence[str]) -> str:
  """Prompt the user to pick a column if not specified via CLI."""
  print(f"\n{prompt}")
  for idx, name in enumerate(columns, start=1):
    print(f"  {idx:2d}) {name}")
  while True:
    selection = input("Enter column number or name: ").strip()
    if not selection:
      continue
    if selection.isdigit():
      idx = int(selection)
      if 1 <= idx <= len(columns):
        return columns[idx - 1]
    if selection in columns:
      return selection
    print("Invalid selection. Please try again.")


def create_plot_with_lap_toggles(
    df: pd.DataFrame,
    x_col: str,
    y_col: str,
    plot_kind: str,
) -> go.Figure:
  """Create a figure with one trace per lap and legend toggles."""
  figure = go.Figure()
  laps = df["lap_file"].dropna().unique().tolist()
  if not laps:
    # Fall back to a single trace if lap information is missing.
    laps = ["all_data"]
    df["lap_file"] = "all_data"

  mode = "lines" if plot_kind == "line" else "markers"

  for lap in sorted(laps):
    lap_df = df[df["lap_file"] == lap]
    hover_columns = {
        "sample_index": lap_df.get("sample_index"),
        "rmse": lap_df.get("rmse"),
        "stddev": lap_df.get("stddev"),
        "mean_error": lap_df.get("mean_error"),
        "mean_abs_error": lap_df.get("mean_abs_error"),
        "max_abs_error": lap_df.get("max_abs_error"),
        "kp": lap_df.get("kp"),
        "ki": lap_df.get("ki"),
        "kd": lap_df.get("kd"),
        "base_speed": lap_df.get("base_speed"),
        "red_speed": lap_df.get("red_speed"),
        "green_speed": lap_df.get("green_speed"),
        "blue_speed": lap_df.get("blue_speed"),
    }
    hover_text = []
    for _, row in lap_df.iterrows():
      parts = [
          f"lap_file: {lap}",
          f"{x_col}: {row[x_col]}",
          f"{y_col}: {row[y_col]}",
      ]
      for label, series in hover_columns.items():
        if series is not None and pd.notna(row.get(label)):
          parts.append(f"{label}: {row[label]}")
      hover_text.append("<br>".join(parts))

    figure.add_trace(
        go.Scatter(
            x=lap_df[x_col],
            y=lap_df[y_col],
            mode=mode,
            name=lap,
            hovertext=hover_text,
            hoverinfo="text",
        )
    )

  figure.update_layout(
      title=f"{y_col} vs {x_col}" if plot_kind == "scatter" else f"{y_col} over {x_col}",
      template="plotly_white",
      hovermode="closest",
      legend=dict(
          title="Lap file",
          itemclick="toggle",
          itemdoubleclick="toggleothers",
      ),
      updatemenus=[
          dict(
              type="buttons",
              direction="right",
              x=1.0,
              y=1.2,
              showactive=False,
              buttons=[
                  dict(
                      label="Show all",
                      method="update",
                      args=[{"visible": [True] * len(figure.data)}],
                  ),
                  dict(
                      label="Hide all",
                      method="update",
                      args=[{"visible": [False] * len(figure.data)}],
                  ),
              ],
          )
      ],
  )

  return figure


def create_plot(
    df: pd.DataFrame,
    x_col: str,
    y_col: str,
    plot_kind: str,
    color_col: Optional[str],
    facet_col: Optional[str],
) -> "plotly.graph_objs._figure.Figure":
  """Create the requested plot using Plotly Express."""
  if plot_kind == "scatter":
    fig = px.scatter(
        df,
        x=x_col,
        y=y_col,
        color=color_col,
        facet_col=facet_col,
        title=f"{y_col} vs {x_col}",
    )
  else:
    fig = px.line(
        df,
        x=x_col,
        y=y_col,
        color=color_col,
        facet_col=facet_col,
        title=f"{y_col} over {x_col}",
    )

  fig.update_layout(
      legend_title_text=color_col if color_col else None,
      hovermode="closest",
      template="plotly_white",
  )
  return fig


def parse_args(argv: Optional[Sequence[str]] = None) -> argparse.Namespace:
  parser = argparse.ArgumentParser(
      description="Plot lap statistics CSV files using Plotly.")
  parser.add_argument(
      "--files",
      nargs="*",
      help="Explicit CSV files to load (overrides --pattern).")
  parser.add_argument(
      "--pattern",
      default=DEFAULT_PATTERN,
      help=f"Glob pattern to discover CSV files (default: {DEFAULT_PATTERN!r}).",
  )
  parser.add_argument(
      "--x",
      help="Column to use for the X axis. If missing, you will be prompted.")
  parser.add_argument(
      "--y",
      help="Column to use for the Y axis. If missing, you will be prompted.")
  parser.add_argument(
      "--color",
      help="Optional column for color grouping (e.g. lap_file or lap_index).")
  parser.add_argument(
      "--facet",
      help="Optional column for facet splits (one subplot per unique value).")
  parser.add_argument(
      "--kind",
      choices=("line", "scatter"),
      default="line",
      help="Plot type to generate (default: line).")
  parser.add_argument(
      "--output",
      help="If provided, save the figure to this HTML file instead of showing it.")
  parser.add_argument(
      "--disable-lap-toggle",
      action="store_true",
      help="Disable per-lap toggles (use Plotly Express colour grouping instead).")
  return parser.parse_args(argv)


def main(argv: Optional[Sequence[str]] = None) -> int:
  args = parse_args(argv)

  try:
    files = args.files if args.files else discover_files(args.pattern)
  except FileNotFoundError as exc:
    print(exc, file=sys.stderr)
    return 1

  print(f"Loading {len(files)} file(s):")
  for path in files:
    print(f"  - {path}")

  df = load_data(files)
  numeric_cols = [
      col for col in df.columns
      if pd.api.types.is_numeric_dtype(df[col]) and not col.startswith("Unnamed")
  ]
  if not numeric_cols:
    print("No numeric columns available for plotting.", file=sys.stderr)
    return 1

  x_col = args.x or choose_column("Select X axis", numeric_cols)
  y_col = args.y or choose_column("Select Y axis", numeric_cols)

  color_col = args.color
  if color_col and color_col not in df.columns:
    print(f"Warning: color column '{color_col}' not found. Ignoring.")
    color_col = None

  facet_col = args.facet
  if facet_col and facet_col not in df.columns:
    print(f"Warning: facet column '{facet_col}' not found. Ignoring.")
    facet_col = None

  use_lap_toggle = not args.disable_lap_toggle and "lap_file" in df.columns

  if use_lap_toggle:
    fig = create_plot_with_lap_toggles(df, x_col, y_col, args.kind)
  else:
    fig = create_plot(df, x_col, y_col, args.kind, color_col, facet_col)

  if args.output:
    output_path = args.output
    fig.write_html(output_path, auto_open=False)
    print(f"Saved plot to {output_path}")
  else:
    fig.show()

  return 0


if __name__ == "__main__":
  sys.exit(main())
